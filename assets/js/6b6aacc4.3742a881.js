"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4840],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(r),d=i,f=p["".concat(s,".").concat(d)]||p[d]||h[d]||a;return r?n.createElement(f,c(c({ref:t},u),{},{components:r})):n.createElement(f,c({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,c=new Array(a);c[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,c[1]=o;for(var l=2;l<a;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},9024:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return h}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),c=["components"],o={id:"large_object_cache",title:"Large Object Cache"},s=void 0,l={unversionedId:"Cache_Library_Architecture_Guide/large_object_cache",id:"Cache_Library_Architecture_Guide/large_object_cache",title:"Large Object Cache",description:"The Large Object Cache (LOC, also known as BlockCache) caches objects that are",source:"@site/docs/Cache_Library_Architecture_Guide/Large_Object_Cache.md",sourceDirName:"Cache_Library_Architecture_Guide",slug:"/Cache_Library_Architecture_Guide/large_object_cache",permalink:"/docs/Cache_Library_Architecture_Guide/large_object_cache",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/Cache_Library_Architecture_Guide/Large_Object_Cache.md",tags:[],version:"current",frontMatter:{id:"large_object_cache",title:"Large Object Cache"},sidebar:"archguideSideBar",previous:{title:"Small Object Cache",permalink:"/docs/Cache_Library_Architecture_Guide/small_object_cache"}},u={},h=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Removes",id:"removes",level:2},{value:"Inserts",id:"inserts",level:2},{value:"Lookups",id:"lookups",level:2},{value:"Persistence across restarts",id:"persistence-across-restarts",level:2}],p={toc:h};function d(e){var t=e.components,o=(0,i.Z)(e,c);return(0,a.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Large Object Cache (LOC, also known as BlockCache) caches objects that are\nlarger than KBs in size using 100s of GB of SSD."),(0,a.kt)("h2",{id:"architecture-overview"},"Architecture Overview"),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",src:r(7997).Z,width:"1154",height:"664"})),(0,a.kt)("p",null,"LOC splits the flash space into a number of regions, and supports region-based\nSFIFO and LRU eviction policy. Each region is by default 16MB, but can be\nconfigured to be up to 256MB. All regions must be identical in size. LOC has an\nin-memory index which grows proportionally with the number of items cached.\nItems in the index will be replaced on hash collision."),(0,a.kt)("h2",{id:"removes"},"Removes"),(0,a.kt)("p",null,"Deleting a key just removes the entry from the in-memory index. The space\noccupied by the item will be reclaimed after the region it is located in is\nreclaimed."),(0,a.kt)("h2",{id:"inserts"},"Inserts"),(0,a.kt)("p",null,"Inserts are asynchronous. We first write a new item into a in-memory buffer\nafter which LOC will acknowledge the write. If the in-memory buffer (always\nassociated with a region) becomes full, we will flush it into the flash device\nto its corresponding region."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",src:r(9991).Z,width:"820",height:"600"})),(0,a.kt)("p",null,"If FIFO region-based eviction policy is configured, the write order is\ncompletely sequential. It resembles the following diagram. Typically, this is\nthe preferred way to use LOC because it provides the lowest device\nampflication."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",src:r(9807).Z,width:"1057",height:"531"})),(0,a.kt)("p",null,"To make sure useful (popular) items stay in cache longer, LOC can be configured\nwith a reinsertion policy. For example, Hits-based reinsertion policy will\nreinsert an item back into LOC at eviction time if this item had been accessed\nat least once."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",src:r(3895).Z,width:"1136",height:"385"})),(0,a.kt)("h2",{id:"lookups"},"Lookups"),(0,a.kt)("p",null,"To lookup an item, we first look at for its address in the in-memory index.\nAfter which, we need to figure out if the item is located on flash, or is\ncurrently in an not-yet-flushed in-memory buffer. We then read from the\nappropriate place and return back to the user."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",src:r(6914).Z,width:"1100",height:"321"})),(0,a.kt)("h2",{id:"persistence-across-restarts"},"Persistence across restarts"),(0,a.kt)("p",null,"LOC serializes all its in-memory structure to the flash device. This includes in-memory index and region metadata."))}d.isMDXComponent=!0},7997:function(e,t,r){t.Z=r.p+"assets/images/large_object_cache_overview-05a8036ba9bde7a27f2e5e373fd03b2f.png"},6914:function(e,t,r){t.Z=r.p+"assets/images/large_object_cache_structured_caching_lookup-e7fb94d6eb847585755a683faaa59ead.png"},9991:function(e,t,r){t.Z=r.p+"assets/images/large_object_cache_structured_caching_page_1-a1044b9b43b0ba35f8223ec92642e03e.png"},3895:function(e,t,r){t.Z=r.p+"assets/images/large_object_cache_structured_caching_page_2-0622ed53a052b9be3f79f8648caa0f23.png"},9807:function(e,t,r){t.Z=r.p+"assets/images/large_object_cache_structured_caching_page_3-99147b9c750a4273a1b45a7ec676ceea.png"}}]);